from dotenv import load_dotenv, find_dotenv
import os
from web3 import Web3


load_dotenv(find_dotenv())

RPC_ENDPOINT = os.environ.get("RPC_ENDPOINT")
CONTRACT_ADDRESS = os.environ.get("CONTRACT_ADDRESS")
PRIVATE_KEY = os.environ.get("PRIVATE_KEY")


def run_exploit(w3):
    """Run exploit."""
    # Create contract instance
    with open("./Fallback.abi", "r") as file:
        abi = file.read()
    Fallback = w3.eth.contract(address=CONTRACT_ADDRESS, abi=abi)

    transaction = {
        "to": ""
    }

    w3.eth.default_account = "0x53D43a3eBFC7b610A2Ba87BC783d555D4Cb3B363"

    print(w3.eth.default_account)

    # w3.eth.account.sign_transaction
    # w3.eth.send_raw_transaction

    # Contribute ether via contract's 'contribute' function

    # Confirm contribution via contract's 'getContribution' function
    # contribution = Fallback.functions.getContribution().call()
    # print(contribution)


    # print(w3.eth.get_block('latest'))


def main():
    """Connect web3 and run exploit."""
    w3 = Web3(Web3.HTTPProvider(RPC_ENDPOINT))

    if w3.isConnected():
        run_exploit(w3)


if __name__ == "__main__":
    main()
